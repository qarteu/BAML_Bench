###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class EditRewrite(BaseModel):
    text: str
    modified_path: str

class ExtractIssueMetadata(BaseModel):
    repo: str
    issue_id: str
    bug_type: str
    framework: List[str]
    versions: Dict[str, str]
    reproduction_code: str
    error_trace: str
    error_message: str
    expected_behavior: str
    proposed_fix: str
    fix_summary: str
    test_coverage: str
    solved: bool

class FindFileResult(BaseModel):
    file_name: str
    dir: Optional[str] = None
    matches: List[str]

class SearchDirResult(BaseModel):
    search_term: str
    dir: Optional[str] = None
    matches: List[str]

class SearchFileResult(BaseModel):
    search_term: str
    file: Optional[str] = None
    matches: List[str]

class SubmitResult(BaseModel):
    status: str
