###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "Extract_agent_data.baml": "// Defining a data model.\nclass ExtractIssueMetadata {\n\n    repo string                         // e.g. \"pvlib-python\"\n    issue_id string                     // e.g. \"pvlib__pvlib-python-1854\"\n    bug_type string                     // High-level category (e.g. \"TypeError\", \"Time zone handling bug\")\n    framework string[]                  // Libraries, packages involved (e.g. [\"pvlib\", \"pandas\"])\n    versions map<string, string>        // Library versions (e.g. {\"pandas\": \"1.0.0\", \"pvlib\": \"0.8.0\"})\n    reproduction_code string            // Code snippet to reproduce the issue\n    error_trace string                  // Full traceback or error output\n    error_message string                // Condensed error message (e.g. \"TypeError: object of type 'Array' has no len()\")\n    expected_behavior string            // What the correct behavior should have been\n    proposed_fix string                 // Code or description of the fix\n    fix_summary string                  // High-level description of what was done to solve the issue\n    test_coverage string                // What tests were run to validate the fix\n    solved bool                         // Was the issue solved? true / false\n  }\n// Create a function to extract the resume from a string.\nfunction ExtractStuff(resume: string) -> ExtractIssueMetadata {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\n\n//issue for 1854 \ntest vaibhav_resume {\n  functions [ExtractStuff]\n  args {\n    resume #\"'{\"env\":{\"deployment\":{\"image\":\"swebench/sweb.eval.x86_64.pvlib_1776_pvlib-python-1854:latest\",\"port\":null,\"docker_args\":[],\"startup_timeout\":180.0,\"pull\":\"missing\",\"remove_images\":false,\"python_standalone_dir\":\"/root\",\"platform\":\"linux/amd64\",\"type\":\"docker\"},\"repo\":{\"repo_name\":\"testbed\",\"base_commit\":\"27a3a07ebc84b11014d3753e4923902adf9a38c0\",\"type\":\"preexisting\"},\"post_startup_commands\":[],\"post_startup_command_timeout\":500,\"name\":\"main\"},\"agent\":{\"name\":\"pvlib__pvlib-python-1854\",\"templates\":{\"system_template\":\"SETTING:\n You are an autonomous programmer, and you''re working directly in the command line\n with a special interface.\\n\\nThe special interface consists of a file editor that\n shows you {{WINDOW}} lines of a file at a time.\\nIn addition to typical bash commands,\n you can also use specific commands to help you navigate and edit files.\\nTo call\n a command, you need to invoke it with a function call/tool call.\\n\\nPlease note\n that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\\n\\nFor example, if you are looking\n at this file:\\n\\ndef fct():\\n    print(\\\"Hello world\\\")\\n\\nand you want to edit\n the file to read:\\n\\ndef fct():\\n    print(\\\"Hello\\\")\\n    print(\\\"world\\\")\\n\\nyou\n search string should be `Hello world` and your replace string should be `\\\"Hello\\\"\\\\n    print(\\\"world\\\")`\\n(note\n the extra spaces before the print statement!).\\n\\nYou could also get the same result\n by search for `    print(\\\"Hello world\\\")` and replace with `    print(\\\"Hello\\\")\\\\n    print(\\\"world\\\")`.\\n\\nRESPONSE\n FORMAT:\\nYour shell prompt is formatted as follows:\\n(Open file: <path>)\\n(Current\n directory: <cwd>)\\nbash-$\\n\\nFirst, you should _always_ include a general thought\n about what you''re going to do next.\\nThen, for every response, you must include\n exactly _ONE_ tool call/function call.\\n\\nRemember, you should always include a\n _SINGLE_ tool call/function call and then wait for a response from the shell before\n continuing with more discussion and commands. Everything you include in the DISCUSSION\n section will be saved for future reference.\\nIf you''d like to issue two commands\n at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool\n call, and then after receiving a response you''ll be able to issue the second .\\nNote\n that the environment does NOT support interactive session commands (e.g. python,\n vim), so please do not invoke them.\",\"instance_template\":\"We''re currently solving\n the following issue within our repository. Here''s the issue text:\\nISSUE:\\n{{problem_statement}}\\n\\nINSTRUCTIONS:\\nNow,\n you''re going to solve this issue on your own. Your terminal session has started\n and you''re in the repository''s root directory. You can use any bash commands or\n the special interface to help you. Edit all the files you need to and run any checks\n or tests that you want.\\nRemember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION\n CALL PER RESPONSE.\\nWhen you''re satisfied with all of the changes you''ve made,\n you can submit your changes to the code base by simply running the submit command.\\nNote\n however that you cannot use any interactive session commands (e.g. python, vim)\n in this environment, but you can write scripts and run them. E.g. you can write\n a python script and then run it with the python command.\\n\\nNOTE ABOUT THE EDIT\n COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate\n indentation before each line!\\n\\nGENERAL IMPORTANT TIPS:\\n\\n1. If you run a command\n and it doesn''t work, try running a different command. A command that did not work\n once will not work the second time unless you modify it!\\n\\n2. If you open a file\n and need to get to an area around a specific line that is not in the first 100 lines,\n say line 583, don''t just use the scroll_down command multiple times. Instead, use\n the goto 583 command. It''s much quicker.\\n\\n3. If the bug reproduction script requires\n inputting/reading a specific file, such as buggy-input.png, and you''d like to understand\n how to input that file, conduct a search in the existing repo code, to see whether\n someone else has already done that. Do this by running the command: find_file \\\"buggy-input.png\\\"\n If that doesn''t work, use the linux ''find'' command.\\n\\n4. Always make sure to\n look at the currently open file and the current working directory (which appears\n right after the currently open file). The currently open file might be in a different\n directory than the working directory! Note that some commands, such as ''create'',\n open files, so they might change the current open file.\\n\\n5. When editing files,\n it is easy to accidentally to write code with incorrect indentation or make other\n mistakes. Always check the code after you issue an edit to make sure that it reflects\n what you wanted to accomplish. If it didn''t, issue another command to fix it.\\n\\n6.\n When editing files, first explain the code you want to edit and why it is causing\n the problem. Then explain the edit you want to make and how it fixes the problem.\n Explain how the edit does not break existing functionality.\\n\\n7. Do not try to\n install any packages with `pip`, `conda`, or any other way. This will usually not\n work. If the environment is not set up correctly, try to fix the issue without executing\n python code or running any tests that require the package installed.\\n\\nSTRATEGY:\\n\\n1.\n Always start by trying to replicate the bug that the issues discusses.\\n  If the\n issue includes code for reproducing the bug, we recommend that you re-implement\n that in your environment, and run it to make sure you can reproduce the bug.\\n  Then\n start trying to fix it.\\n\\n  If the bug reproduction script does not print anything\n when it successfully runs, we recommend adding a print(\\\"Script completed successfully,\n no errors.\\\") command at the end of the file,\\n  so that you can be sure that the\n script indeed ran fine all the way through.\\n\\n2. Locate relevant code using the\n find and search commands. `open` the file you want to edit.\\n\\n3. Use the `edit`\n command to perform edits.\\n\\n4. When you think you''ve fixed the bug, re-run the\n bug reproduction script to make sure that the bug has indeed been fixed.\\n\\n5. Create\n additional tests to verify the fix in a style similar to the existing reproduction\n script. In particular, make sure to test edge cases.\\n   If you find any issues,\n go back to the file you edited and perform further edits.\\n\\n(Open file: {{open_file}})\\n(Current\n directory: {{working_dir}})\\nbash-$\",\"next_step_template\":\"{{observation}}\\n(Open\n file: {{open_file}})\\n(Current directory: {{working_dir}})\\nbash-$\",\"next_step_truncated_observation_template\":\"Observation:\n {{observation}}<response clipped><NOTE>Observations should not exceeded {{max_observation_length}}\n characters. {{elided_chars}} characters were elided. Please try a different command\n that produces less output or use head/tail/grep/redirect the output to a file. Do\n not use interactive pagers.</NOTE>\",\"max_observation_length\":100000,\"next_step_no_output_template\":\"Your\n command ran successfully and did not produce any output.\\n(Open file: {{open_file}})\\n(Current\n directory: {{working_dir}})\\nbash-$\",\"strategy_template\":null,\"demonstration_template\":\"Here\n is a demonstration of how to correctly accomplish this task.\\nIt is included to\n show you how to correctly use the interface.\\nYou do not need to follow exactly\n what is done in the demonstration.\\n--- DEMONSTRATION ---\\n{{demonstration}}\\n---\n END OF DEMONSTRATION ---\\n\",\"demonstrations\":[\"/Users/kartik/Documents/BAML_SWE/SWE-agent/trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace__install-1/marshmallow-code__marshmallow-1867.traj\"],\"put_demos_in_history\":true,\"shell_check_error_template\":\"Your\n bash command contained syntax errors and was NOT executed. Please fix the syntax\n errors and try again. This can be the result of not adhering to the syntax for multi-line\n commands. Here is the output of `bash -n`:\\n{{bash_stdout}}\\n{{bash_stderr}}\",\"command_cancelled_timeout_template\":\"The\n command ''{{command}}'' was cancelled because it took more than {{timeout}} seconds.\n Please try a different command that completes more quickly.\"},\"tools\":{\"filter\":{\"blocklist_error_template\":\"Operation\n ''{{action}}'' is not supported by this environment.\",\"blocklist\":[\"vim\",\"vi\",\"emacs\",\"nano\",\"nohup\",\"gdb\",\"less\",\"tail\n -f\",\"python -m venv\",\"make\"],\"blocklist_standalone\":[\"python\",\"python3\",\"ipython\",\"bash\",\"sh\",\"/bin/bash\",\"/bin/sh\",\"nohup\",\"vi\",\"vim\",\"emacs\",\"nano\",\"su\"],\"block_unless_regex\":{\"radare2\":\"\\\\b(?:radare2)\\\\b.*\\\\s+-c\\\\s+.*\",\"r2\":\"\\\\b(?:radare2)\\\\b.*\\\\s+-c\\\\s+.*\"}},\"bundles\":[{\"path\":\"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/registry\",\"hidden_tools\":[]},{\"path\":\"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/defaults\",\"hidden_tools\":[]},{\"path\":\"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/search\",\"hidden_tools\":[]},{\"path\":\"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/edit_replace\",\"hidden_tools\":[]},{\"path\":\"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/submit\",\"hidden_tools\":[]}],\"env_variables\":{\"WINDOW\":100,\"OVERLAP\":2},\"registry_variables\":{},\"submit_command\":\"submit\",\"parse_function\":{\"error_message\":\"{%-\n if error_code == \\\"missing\\\" -%}\\nYour last output did not use any tool calls!\\nPlease\n make sure your output includes exactly _ONE_ function call!\\nYou must invoke the\n function directly using the function call format.\\nYou cannot invoke commands with\n ```, you have to use the function call format.\\nIf you think you have already resolved\n the issue, please submit your changes by running the `submit` command.\\nIf you think\n you cannot solve the problem, please run `exit_forfeit` (if available) or `submit`.\\nElse,\n please continue with a new tool call!\\n{%- elif error_code == \\\"multiple\\\" -%}\\nYour\n last output included multiple tool calls!\\nPlease make sure your output includes\n a thought and exactly _ONE_ function call.\\n{%- elif error_code == \\\"unexpected_arg\\\"\n -%}\\nYour action could not be parsed properly: {{exception_message}}.\\nMake sure\n your function call doesn''t include any extra arguments that are not in the allowed\n arguments, and only use the allowed commands.\\n{%- else -%}\\nYour action could not\n be parsed properly: {{exception_message}}.\\n{% endif %}\\n\",\"type\":\"function_calling\"},\"enable_bash_tool\":true,\"format_error_template\":\"{%-\n if error_code == \\\"missing\\\" -%}\\nYour last output did not use any tool calls!\\nPlease\n make sure your output includes exactly _ONE_ function call!\\nYou must invoke the\n function directly using the function call format.\\nYou cannot invoke commands with\n ```, you have to use the function call format.\\nIf you think you have already resolved\n the issue, please submit your changes by running the `submit` command.\\nIf you think\n you cannot solve the problem, please run `exit_forfeit` (if available) or `submit`.\\nElse,\n please continue with a new tool call!\\n{%- elif error_code == \\\"multiple\\\" -%}\\nYour\n last output included multiple tool calls!\\nPlease make sure your output includes\n a thought and exactly _ONE_ function call.\\n{%- elif error_code == \\\"unexpected_arg\\\"\n -%}\\nYour action could not be parsed properly: {{exception_message}}.\\nMake sure\n your function call doesn''t include any extra arguments that are not in the allowed\n arguments, and only use the allowed commands.\\n{%- else -%}\\nYour action could not\n be parsed properly: {{exception_message}}.\\n{% endif %}\\n\",\"command_docs\":\"bash:\\n  docstring:\n runs the given command directly in bash\\n  signature: <command>\\n  arguments:\\n    -\n command (string) [required]: The bash command to execute.\\n\\ngoto:\\n  docstring:\n moves the window to show <line_number>\\n  signature: goto <line_number>\\n  arguments:\\n    -\n line_number (integer) [required]: the line number to move the window to\\n\\nopen:\\n  docstring:\n opens the file at the given path in the editor. If line_number is provided, the\n window will be move to include that line\\n  signature: open \\\"<path>\\\" [<line_number>]\\n  arguments:\\n    -\n path (string) [required]: the path to the file to open\\n    - line_number (integer)\n [optional]: the line number to move the window to (if not provided, the window will\n start at the top of the file)\\n\\ncreate:\\n  docstring: creates and opens a new file\n with the given name\\n  signature: create <filename>\\n  arguments:\\n    - filename\n (string) [required]: the name of the file to create\\n\\nscroll_up:\\n  docstring:\n moves the window up 100 lines\\n  signature: scroll_up\\n\\nscroll_down:\\n  docstring:\n moves the window down 100 lines\\n  signature: scroll_down\\n\\nfind_file:\\n  docstring:\n finds all files with the given name or pattern in dir. If dir is not provided, searches\n in the current directory\\n  signature: find_file <file_name> [<dir>]\\n  arguments:\\n    -\n file_name (string) [required]: the name of the file or pattern to search for. supports\n shell-style wildcards (e.g. *.py)\\n    - dir (string) [optional]: the directory\n to search in (if not provided, searches in the current directory)\\n\\nsearch_dir:\\n  docstring:\n searches for search_term in all files in dir. If dir is not provided, searches in\n the current directory\\n  signature: search_dir <search_term> [<dir>]\\n  arguments:\\n    -\n search_term (string) [required]: the term to search for\\n    - dir (string) [optional]:\n the directory to search in (if not provided, searches in the current directory)\\n\\nsearch_file:\\n  docstring:\n searches for search_term in file. If file is not provided, searches in the current\n open file\\n  signature: search_file <search_term> [<file>]\\n  arguments:\\n    -\n search_term (string) [required]: the term to search for\\n    - file (string) [optional]:\n the file to search in (if not provided, searches in the current open file)\\n\\nedit:\\n  docstring:\n Replace first occurrence of <search> with <replace> in the currently displayed lines.\n If replace-all is True , replace all occurrences of <search> with <replace>.\\nFor\n example, if you are looking at this file:\\ndef fct():\\n    print(\\\"Hello world\\\")\\n\\nand\n you want to edit the file to read:\\ndef fct():\\n    print(\\\"Hello\\\")\\n    print(\\\"world\\\")\\n\\nyou\n can search for `Hello world` and replace with `\\\"Hello\\\"\\\\n    print(\\\"world\\\")`\n (note the extra spaces before the print statement!).\\nTips:\\n1. Always include proper\n whitespace/indentation 2. When you are adding an if/with/try statement, you need\n to INDENT the block that follows, so make sure to include it in both your search\n and replace strings! 3. If you are wrapping code in a try statement, make sure to\n also add an ''except'' or ''finally'' block.\\nBefore every edit, please\\n1. Explain\n the code you want to edit and why it is causing the problem 2. Explain the edit\n you want to make and how it fixes the problem 3. Explain how the edit does not break\n existing functionality\\n\\n  signature: edit <search> <replace> [<replace-all>]\\n\\n  arguments:\\n    -\n search (string) [required]: the text to search for (make sure to include proper\n whitespace if needed)\\n    - replace (string) [required]: the text to replace the\n search with (make sure to include proper whitespace if needed)\\n    - replace-all\n (boolean) [optional]: replace all occurrences rather than the first occurrence within\n the displayed lines\\n\\ninsert:\\n  docstring: Insert <text> at the end of the currently\n opened file or after <line> if specified.\\n\\n  signature: insert <text> [<line>]\\n\\n  arguments:\\n    -\n text (string) [required]: the text to insert\\n    - line (integer) [optional]: the\n line number to insert the text as new lines after\\n\\nsubmit:\\n  docstring: submits\n the current file\\n  signature: submit\\n\\n\",\"multi_line_command_endings\":{},\"submit_command_end_name\":null,\"reset_commands\":[],\"execution_timeout\":30,\"install_timeout\":300,\"total_execution_timeout\":1800,\"max_consecutive_execution_timeouts\":3},\"history_processors\":[{\"n\":5,\"polling\":1,\"always_remove_output_for_tags\":[\"remove_output\"],\"always_keep_output_for_tags\":[\"keep_output\"],\"type\":\"last_n_observations\"}],\"model\":{\"name\":\"gpt-4o\",\"per_instance_cost_limit\":0.0,\"total_cost_limit\":0.0,\"per_instance_call_limit\":0,\"temperature\":0.0,\"top_p\":1.0,\"api_base\":null,\"api_version\":null,\"api_key\":null,\"stop\":[],\"completion_kwargs\":{},\"convert_system_to_user\":false,\"retry\":{\"retries\":20,\"min_wait\":10.0,\"max_wait\":120.0},\"delay\":0.0,\"fallbacks\":[],\"choose_api_key_by_thread\":true,\"max_input_tokens\":null,\"max_output_tokens\":null},\"max_requeries\":3,\"action_sampler\":null,\"type\":\"default\"},\"problem_statement\":{\"text\":\"PVSystem\n with single Array generates an error\\n**Is your feature request related to a problem?\n Please describe.**\\r\\n\\r\\nWhen a PVSystem has a single Array, you can''t assign\n just the Array instance when constructing the PVSystem.\\r\\n\\r\\n```\\r\\nmount = pvlib.pvsystem.FixedMount(surface_tilt=35,\n surface_azimuth=180)\\r\\narray = pvlib.pvsystem.Array(mount=mount)\\r\\npv = pvlib.pvsystem.PVSystem(arrays=array)\\r\\n\\r\\n---------------------------------------------------------------------------\\r\\nTypeError                                 Traceback\n (most recent call last)\\r\\n<ipython-input-13-f5424e3db16a> in <module>\\r\\n      3\n mount = pvlib.pvsystem.FixedMount(surface_tilt=35, surface_azimuth=180)\\r\\n      4\n array = pvlib.pvsystem.Array(mount=mount)\\r\\n----> 5 pv = pvlib.pvsystem.PVSystem(arrays=array)\\r\\n\\r\\n~\\\\anaconda3\\\\lib\\\\site-packages\\\\pvlib\\\\pvsystem.py\n in __init__(self, arrays, surface_tilt, surface_azimuth, albedo, surface_type, module,\n module_type, module_parameters, temperature_model_parameters, modules_per_string,\n strings_per_inverter, inverter, inverter_parameters, racking_model, losses_parameters,\n name)\\r\\n    251                 array_losses_parameters,\\r\\n    252             ),)\\r\\n-->\n 253         elif len(arrays) == 0:\\r\\n    254             raise ValueError(\\\"PVSystem\n must have at least one Array. \\\"\\r\\n    255                              \\\"If you\n want to create a PVSystem instance \\\"\\r\\n\\r\\nTypeError: object of type ''Array''\n has no len()\\r\\n\\r\\n```\\r\\n\\r\\nNot a bug per se, since the PVSystem docstring requests\n that `arrays` be iterable. Still, a bit inconvenient to have to do this\\r\\n\\r\\n```\\r\\nmount\n = pvlib.pvsystem.FixedMount(surface_tilt=35, surface_azimuth=180)\\r\\narray = pvlib.pvsystem.Array(mount=mount)\\r\\npv\n = pvlib.pvsystem.PVSystem(arrays=[array])\\r\\n```\\r\\n\\r\\n**Describe the solution\n you''d like**\\r\\nHandle `arrays=array` where `array` is an instance of `Array`\\r\\n\\r\\n**Describe\n alternatives you''ve considered**\\r\\nStatus quo - either make the single Array into\n a list, or use the PVSystem kwargs.\\r\\n\\n\",\"extra_fields\":{},\"type\":\"text\",\"id\":\"pvlib__pvlib-python-1854\"},\"output_dir\":\"DEFAULT\",\"actions\":{\"open_pr\":false,\"pr_config\":{\"skip_if_commits_reference_issue\":true},\"apply_patch_locally\":false},\"env_var_path\":null}'\n\n\n\n    \"#\n  }\n}\n",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.81.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "tools/edit_rewrite.baml": "class EditRewrite {\n    text string @description(\"The text to replace the currently displayed lines with\")\n    modified_path string @description(\"Path to the modified file\")\n}\n\nfunction EditFile(user_message: string) -> EditRewrite {\n    client \"openai/gpt-4\"\n    prompt #\"\n        Extract the file changes from the user message and return them in a structured format.\n        User message: {{user_message}}\n        \n        You must return a JSON object with these exact fields:\n        {\n            \"text\": \"the changes to make\",\n            \"modified_path\": \"the path to the file\"\n        }\n    \"#\n}",
}

def get_baml_files():
    return file_map