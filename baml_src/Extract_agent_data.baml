// Defining a data model.
class ExtractIssueMetadata {

    repo string                         // e.g. "pvlib-python"
    issue_id string                     // e.g. "pvlib__pvlib-python-1854"
    bug_type string                     // High-level category (e.g. "TypeError", "Time zone handling bug")
    framework string[]                  // Libraries, packages involved (e.g. ["pvlib", "pandas"])
    versions map<string, string>        // Library versions (e.g. {"pandas": "1.0.0", "pvlib": "0.8.0"})
    reproduction_code string            // Code snippet to reproduce the issue
    error_trace string                  // Full traceback or error output
    error_message string                // Condensed error message (e.g. "TypeError: object of type 'Array' has no len()")
    expected_behavior string            // What the correct behavior should have been
    proposed_fix string                 // Code or description of the fix
    fix_summary string                  // High-level description of what was done to solve the issue
    test_coverage string                // What tests were run to validate the fix
    solved bool                         // Was the issue solved? true / false
  }
// Create a function to extract the resume from a string.
function ExtractStuff(resume: string) -> ExtractIssueMetadata {
  // Specify a client as provider/model-name
  // you can use custom LLM params with a custom client name from clients.baml like "client CustomHaiku"
  client "openai/gpt-4o" // Set OPENAI_API_KEY to use this client.
  prompt #"
    Extract from this content:
    {{ resume }}

    {{ ctx.output_format }}
  "#
}



// Test the function with a sample resume. Open the VSCode playground to run this.

//issue for 1854 
test vaibhav_resume {
  functions [ExtractStuff]
  args {
    resume #"'{"env":{"deployment":{"image":"swebench/sweb.eval.x86_64.pvlib_1776_pvlib-python-1854:latest","port":null,"docker_args":[],"startup_timeout":180.0,"pull":"missing","remove_images":false,"python_standalone_dir":"/root","platform":"linux/amd64","type":"docker"},"repo":{"repo_name":"testbed","base_commit":"27a3a07ebc84b11014d3753e4923902adf9a38c0","type":"preexisting"},"post_startup_commands":[],"post_startup_command_timeout":500,"name":"main"},"agent":{"name":"pvlib__pvlib-python-1854","templates":{"system_template":"SETTING:
 You are an autonomous programmer, and you''re working directly in the command line
 with a special interface.\n\nThe special interface consists of a file editor that
 shows you {{WINDOW}} lines of a file at a time.\nIn addition to typical bash commands,
 you can also use specific commands to help you navigate and edit files.\nTo call
 a command, you need to invoke it with a function call/tool call.\n\nPlease note
 that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\n\nFor example, if you are looking
 at this file:\n\ndef fct():\n    print(\"Hello world\")\n\nand you want to edit
 the file to read:\n\ndef fct():\n    print(\"Hello\")\n    print(\"world\")\n\nyou
 search string should be `Hello world` and your replace string should be `\"Hello\"\\n    print(\"world\")`\n(note
 the extra spaces before the print statement!).\n\nYou could also get the same result
 by search for `    print(\"Hello world\")` and replace with `    print(\"Hello\")\\n    print(\"world\")`.\n\nRESPONSE
 FORMAT:\nYour shell prompt is formatted as follows:\n(Open file: <path>)\n(Current
 directory: <cwd>)\nbash-$\n\nFirst, you should _always_ include a general thought
 about what you''re going to do next.\nThen, for every response, you must include
 exactly _ONE_ tool call/function call.\n\nRemember, you should always include a
 _SINGLE_ tool call/function call and then wait for a response from the shell before
 continuing with more discussion and commands. Everything you include in the DISCUSSION
 section will be saved for future reference.\nIf you''d like to issue two commands
 at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool
 call, and then after receiving a response you''ll be able to issue the second .\nNote
 that the environment does NOT support interactive session commands (e.g. python,
 vim), so please do not invoke them.","instance_template":"We''re currently solving
 the following issue within our repository. Here''s the issue text:\nISSUE:\n{{problem_statement}}\n\nINSTRUCTIONS:\nNow,
 you''re going to solve this issue on your own. Your terminal session has started
 and you''re in the repository''s root directory. You can use any bash commands or
 the special interface to help you. Edit all the files you need to and run any checks
 or tests that you want.\nRemember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION
 CALL PER RESPONSE.\nWhen you''re satisfied with all of the changes you''ve made,
 you can submit your changes to the code base by simply running the submit command.\nNote
 however that you cannot use any interactive session commands (e.g. python, vim)
 in this environment, but you can write scripts and run them. E.g. you can write
 a python script and then run it with the python command.\n\nNOTE ABOUT THE EDIT
 COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate
 indentation before each line!\n\nGENERAL IMPORTANT TIPS:\n\n1. If you run a command
 and it doesn''t work, try running a different command. A command that did not work
 once will not work the second time unless you modify it!\n\n2. If you open a file
 and need to get to an area around a specific line that is not in the first 100 lines,
 say line 583, don''t just use the scroll_down command multiple times. Instead, use
 the goto 583 command. It''s much quicker.\n\n3. If the bug reproduction script requires
 inputting/reading a specific file, such as buggy-input.png, and you''d like to understand
 how to input that file, conduct a search in the existing repo code, to see whether
 someone else has already done that. Do this by running the command: find_file \"buggy-input.png\"
 If that doesn''t work, use the linux ''find'' command.\n\n4. Always make sure to
 look at the currently open file and the current working directory (which appears
 right after the currently open file). The currently open file might be in a different
 directory than the working directory! Note that some commands, such as ''create'',
 open files, so they might change the current open file.\n\n5. When editing files,
 it is easy to accidentally to write code with incorrect indentation or make other
 mistakes. Always check the code after you issue an edit to make sure that it reflects
 what you wanted to accomplish. If it didn''t, issue another command to fix it.\n\n6.
 When editing files, first explain the code you want to edit and why it is causing
 the problem. Then explain the edit you want to make and how it fixes the problem.
 Explain how the edit does not break existing functionality.\n\n7. Do not try to
 install any packages with `pip`, `conda`, or any other way. This will usually not
 work. If the environment is not set up correctly, try to fix the issue without executing
 python code or running any tests that require the package installed.\n\nSTRATEGY:\n\n1.
 Always start by trying to replicate the bug that the issues discusses.\n  If the
 issue includes code for reproducing the bug, we recommend that you re-implement
 that in your environment, and run it to make sure you can reproduce the bug.\n  Then
 start trying to fix it.\n\n  If the bug reproduction script does not print anything
 when it successfully runs, we recommend adding a print(\"Script completed successfully,
 no errors.\") command at the end of the file,\n  so that you can be sure that the
 script indeed ran fine all the way through.\n\n2. Locate relevant code using the
 find and search commands. `open` the file you want to edit.\n\n3. Use the `edit`
 command to perform edits.\n\n4. When you think you''ve fixed the bug, re-run the
 bug reproduction script to make sure that the bug has indeed been fixed.\n\n5. Create
 additional tests to verify the fix in a style similar to the existing reproduction
 script. In particular, make sure to test edge cases.\n   If you find any issues,
 go back to the file you edited and perform further edits.\n\n(Open file: {{open_file}})\n(Current
 directory: {{working_dir}})\nbash-$","next_step_template":"{{observation}}\n(Open
 file: {{open_file}})\n(Current directory: {{working_dir}})\nbash-$","next_step_truncated_observation_template":"Observation:
 {{observation}}<response clipped><NOTE>Observations should not exceeded {{max_observation_length}}
 characters. {{elided_chars}} characters were elided. Please try a different command
 that produces less output or use head/tail/grep/redirect the output to a file. Do
 not use interactive pagers.</NOTE>","max_observation_length":100000,"next_step_no_output_template":"Your
 command ran successfully and did not produce any output.\n(Open file: {{open_file}})\n(Current
 directory: {{working_dir}})\nbash-$","strategy_template":null,"demonstration_template":"Here
 is a demonstration of how to correctly accomplish this task.\nIt is included to
 show you how to correctly use the interface.\nYou do not need to follow exactly
 what is done in the demonstration.\n--- DEMONSTRATION ---\n{{demonstration}}\n---
 END OF DEMONSTRATION ---\n","demonstrations":["/Users/kartik/Documents/BAML_SWE/SWE-agent/trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace__install-1/marshmallow-code__marshmallow-1867.traj"],"put_demos_in_history":true,"shell_check_error_template":"Your
 bash command contained syntax errors and was NOT executed. Please fix the syntax
 errors and try again. This can be the result of not adhering to the syntax for multi-line
 commands. Here is the output of `bash -n`:\n{{bash_stdout}}\n{{bash_stderr}}","command_cancelled_timeout_template":"The
 command ''{{command}}'' was cancelled because it took more than {{timeout}} seconds.
 Please try a different command that completes more quickly."},"tools":{"filter":{"blocklist_error_template":"Operation
 ''{{action}}'' is not supported by this environment.","blocklist":["vim","vi","emacs","nano","nohup","gdb","less","tail
 -f","python -m venv","make"],"blocklist_standalone":["python","python3","ipython","bash","sh","/bin/bash","/bin/sh","nohup","vi","vim","emacs","nano","su"],"block_unless_regex":{"radare2":"\\b(?:radare2)\\b.*\\s+-c\\s+.*","r2":"\\b(?:radare2)\\b.*\\s+-c\\s+.*"}},"bundles":[{"path":"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/registry","hidden_tools":[]},{"path":"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/defaults","hidden_tools":[]},{"path":"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/search","hidden_tools":[]},{"path":"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/edit_replace","hidden_tools":[]},{"path":"/Users/kartik/Documents/BAML_SWE/SWE-agent/tools/submit","hidden_tools":[]}],"env_variables":{"WINDOW":100,"OVERLAP":2},"registry_variables":{},"submit_command":"submit","parse_function":{"error_message":"{%-
 if error_code == \"missing\" -%}\nYour last output did not use any tool calls!\nPlease
 make sure your output includes exactly _ONE_ function call!\nYou must invoke the
 function directly using the function call format.\nYou cannot invoke commands with
 ```, you have to use the function call format.\nIf you think you have already resolved
 the issue, please submit your changes by running the `submit` command.\nIf you think
 you cannot solve the problem, please run `exit_forfeit` (if available) or `submit`.\nElse,
 please continue with a new tool call!\n{%- elif error_code == \"multiple\" -%}\nYour
 last output included multiple tool calls!\nPlease make sure your output includes
 a thought and exactly _ONE_ function call.\n{%- elif error_code == \"unexpected_arg\"
 -%}\nYour action could not be parsed properly: {{exception_message}}.\nMake sure
 your function call doesn''t include any extra arguments that are not in the allowed
 arguments, and only use the allowed commands.\n{%- else -%}\nYour action could not
 be parsed properly: {{exception_message}}.\n{% endif %}\n","type":"function_calling"},"enable_bash_tool":true,"format_error_template":"{%-
 if error_code == \"missing\" -%}\nYour last output did not use any tool calls!\nPlease
 make sure your output includes exactly _ONE_ function call!\nYou must invoke the
 function directly using the function call format.\nYou cannot invoke commands with
 ```, you have to use the function call format.\nIf you think you have already resolved
 the issue, please submit your changes by running the `submit` command.\nIf you think
 you cannot solve the problem, please run `exit_forfeit` (if available) or `submit`.\nElse,
 please continue with a new tool call!\n{%- elif error_code == \"multiple\" -%}\nYour
 last output included multiple tool calls!\nPlease make sure your output includes
 a thought and exactly _ONE_ function call.\n{%- elif error_code == \"unexpected_arg\"
 -%}\nYour action could not be parsed properly: {{exception_message}}.\nMake sure
 your function call doesn''t include any extra arguments that are not in the allowed
 arguments, and only use the allowed commands.\n{%- else -%}\nYour action could not
 be parsed properly: {{exception_message}}.\n{% endif %}\n","command_docs":"bash:\n  docstring:
 runs the given command directly in bash\n  signature: <command>\n  arguments:\n    -
 command (string) [required]: The bash command to execute.\n\ngoto:\n  docstring:
 moves the window to show <line_number>\n  signature: goto <line_number>\n  arguments:\n    -
 line_number (integer) [required]: the line number to move the window to\n\nopen:\n  docstring:
 opens the file at the given path in the editor. If line_number is provided, the
 window will be move to include that line\n  signature: open \"<path>\" [<line_number>]\n  arguments:\n    -
 path (string) [required]: the path to the file to open\n    - line_number (integer)
 [optional]: the line number to move the window to (if not provided, the window will
 start at the top of the file)\n\ncreate:\n  docstring: creates and opens a new file
 with the given name\n  signature: create <filename>\n  arguments:\n    - filename
 (string) [required]: the name of the file to create\n\nscroll_up:\n  docstring:
 moves the window up 100 lines\n  signature: scroll_up\n\nscroll_down:\n  docstring:
 moves the window down 100 lines\n  signature: scroll_down\n\nfind_file:\n  docstring:
 finds all files with the given name or pattern in dir. If dir is not provided, searches
 in the current directory\n  signature: find_file <file_name> [<dir>]\n  arguments:\n    -
 file_name (string) [required]: the name of the file or pattern to search for. supports
 shell-style wildcards (e.g. *.py)\n    - dir (string) [optional]: the directory
 to search in (if not provided, searches in the current directory)\n\nsearch_dir:\n  docstring:
 searches for search_term in all files in dir. If dir is not provided, searches in
 the current directory\n  signature: search_dir <search_term> [<dir>]\n  arguments:\n    -
 search_term (string) [required]: the term to search for\n    - dir (string) [optional]:
 the directory to search in (if not provided, searches in the current directory)\n\nsearch_file:\n  docstring:
 searches for search_term in file. If file is not provided, searches in the current
 open file\n  signature: search_file <search_term> [<file>]\n  arguments:\n    -
 search_term (string) [required]: the term to search for\n    - file (string) [optional]:
 the file to search in (if not provided, searches in the current open file)\n\nedit:\n  docstring:
 Replace first occurrence of <search> with <replace> in the currently displayed lines.
 If replace-all is True , replace all occurrences of <search> with <replace>.\nFor
 example, if you are looking at this file:\ndef fct():\n    print(\"Hello world\")\n\nand
 you want to edit the file to read:\ndef fct():\n    print(\"Hello\")\n    print(\"world\")\n\nyou
 can search for `Hello world` and replace with `\"Hello\"\\n    print(\"world\")`
 (note the extra spaces before the print statement!).\nTips:\n1. Always include proper
 whitespace/indentation 2. When you are adding an if/with/try statement, you need
 to INDENT the block that follows, so make sure to include it in both your search
 and replace strings! 3. If you are wrapping code in a try statement, make sure to
 also add an ''except'' or ''finally'' block.\nBefore every edit, please\n1. Explain
 the code you want to edit and why it is causing the problem 2. Explain the edit
 you want to make and how it fixes the problem 3. Explain how the edit does not break
 existing functionality\n\n  signature: edit <search> <replace> [<replace-all>]\n\n  arguments:\n    -
 search (string) [required]: the text to search for (make sure to include proper
 whitespace if needed)\n    - replace (string) [required]: the text to replace the
 search with (make sure to include proper whitespace if needed)\n    - replace-all
 (boolean) [optional]: replace all occurrences rather than the first occurrence within
 the displayed lines\n\ninsert:\n  docstring: Insert <text> at the end of the currently
 opened file or after <line> if specified.\n\n  signature: insert <text> [<line>]\n\n  arguments:\n    -
 text (string) [required]: the text to insert\n    - line (integer) [optional]: the
 line number to insert the text as new lines after\n\nsubmit:\n  docstring: submits
 the current file\n  signature: submit\n\n","multi_line_command_endings":{},"submit_command_end_name":null,"reset_commands":[],"execution_timeout":30,"install_timeout":300,"total_execution_timeout":1800,"max_consecutive_execution_timeouts":3},"history_processors":[{"n":5,"polling":1,"always_remove_output_for_tags":["remove_output"],"always_keep_output_for_tags":["keep_output"],"type":"last_n_observations"}],"model":{"name":"gpt-4o","per_instance_cost_limit":0.0,"total_cost_limit":0.0,"per_instance_call_limit":0,"temperature":0.0,"top_p":1.0,"api_base":null,"api_version":null,"api_key":null,"stop":[],"completion_kwargs":{},"convert_system_to_user":false,"retry":{"retries":20,"min_wait":10.0,"max_wait":120.0},"delay":0.0,"fallbacks":[],"choose_api_key_by_thread":true,"max_input_tokens":null,"max_output_tokens":null},"max_requeries":3,"action_sampler":null,"type":"default"},"problem_statement":{"text":"PVSystem
 with single Array generates an error\n**Is your feature request related to a problem?
 Please describe.**\r\n\r\nWhen a PVSystem has a single Array, you can''t assign
 just the Array instance when constructing the PVSystem.\r\n\r\n```\r\nmount = pvlib.pvsystem.FixedMount(surface_tilt=35,
 surface_azimuth=180)\r\narray = pvlib.pvsystem.Array(mount=mount)\r\npv = pvlib.pvsystem.PVSystem(arrays=array)\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback
 (most recent call last)\r\n<ipython-input-13-f5424e3db16a> in <module>\r\n      3
 mount = pvlib.pvsystem.FixedMount(surface_tilt=35, surface_azimuth=180)\r\n      4
 array = pvlib.pvsystem.Array(mount=mount)\r\n----> 5 pv = pvlib.pvsystem.PVSystem(arrays=array)\r\n\r\n~\\anaconda3\\lib\\site-packages\\pvlib\\pvsystem.py
 in __init__(self, arrays, surface_tilt, surface_azimuth, albedo, surface_type, module,
 module_type, module_parameters, temperature_model_parameters, modules_per_string,
 strings_per_inverter, inverter, inverter_parameters, racking_model, losses_parameters,
 name)\r\n    251                 array_losses_parameters,\r\n    252             ),)\r\n-->
 253         elif len(arrays) == 0:\r\n    254             raise ValueError(\"PVSystem
 must have at least one Array. \"\r\n    255                              \"If you
 want to create a PVSystem instance \"\r\n\r\nTypeError: object of type ''Array''
 has no len()\r\n\r\n```\r\n\r\nNot a bug per se, since the PVSystem docstring requests
 that `arrays` be iterable. Still, a bit inconvenient to have to do this\r\n\r\n```\r\nmount
 = pvlib.pvsystem.FixedMount(surface_tilt=35, surface_azimuth=180)\r\narray = pvlib.pvsystem.Array(mount=mount)\r\npv
 = pvlib.pvsystem.PVSystem(arrays=[array])\r\n```\r\n\r\n**Describe the solution
 you''d like**\r\nHandle `arrays=array` where `array` is an instance of `Array`\r\n\r\n**Describe
 alternatives you''ve considered**\r\nStatus quo - either make the single Array into
 a list, or use the PVSystem kwargs.\r\n\n","extra_fields":{},"type":"text","id":"pvlib__pvlib-python-1854"},"output_dir":"DEFAULT","actions":{"open_pr":false,"pr_config":{"skip_if_commits_reference_issue":true},"apply_patch_locally":false},"env_var_path":null}'



    "#
  }
}
